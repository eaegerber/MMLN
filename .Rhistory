x
grp
library(lme4)
datatest = data.frame(y1 = y[,1], y2 = y[,2], x, grp)
test <- lmer("y1 + y2 ~ x + (1|group)", data = datatest)
test <- lmer("y1 + y2 ~ x + (1|grp)", data = datatest)
test
test <- lmer("cbind(y1, y2) ~ x + (1|grp)", data = datatest)
test2 <- MCMCglmm(cbind(y1, y2) ~ x, random = ~us(x):grp, data = datatest, family = c("gaussian", "gaussian"))
install.packages("MCMCglmm")
test <- lmer("y1 ~ x + (1|grp)", data = datatest)
test <- lmer("y2 ~ x + (1|grp)", data = datatest)
test <- lmer("y1+y2 ~ x + (1|grp)", data = datatest)
test
test@beta
test@theta
test@u
sort(test@u)
diag(2)
install.packages("sabreR")
library(mvnfast)
rmvn(n=5, mu = c(2, 10, 30, 80)))
rmvn(n=5, mu = c(2, 10, 30, 80))
rmvn(n=5, mu = c(2, 10, 30, 80), sigma = diag(4))
round(rmvn(n=5, mu = c(2, 10, 30, 80), sigma = diag(4)))
cov(round(rmvn(n=5, mu = c(2, 10, 30, 80), sigma = diag(4))))
matrix(c(1, .8, .1, -.8,
.8, 1, .6, .5,
.1, .6, 1, .9,
-.8, .5, .9, 1)
)
matrix(c(1, .8, .1, -.8,
.8, 1, .6, .5,
.1, .6, 1, .9,
-.8, .5, .9, 1), nrow = 4)
round(rmvn(n=5, mu = c(2, 10, 30, 80), sigma = matrix(c(1, .8, .1, -.8,
.8, 1, .6, .5,
.1, .6, 1, .9,
-.8, .5, .9, 1), nrow = 4)))
x1 <- rnorm(5, mean = 10, sd = 1)
x1
x1 <- round(rnorm(5, mean = 10, sd = 3)
)
x1
x1 <- round(rnorm(5, mean = 10, sd = 5))
x1
x1 <- round(rnorm(5, mean = 10, sd = 8))
x1
x1 <- round(rnorm(5, mean = 10, sd = 6))
x1
x2 <- round(rnorm(5, mean = 30, sd = 10))
x2
x2 <- round(rnorm(5, mean = 30, sd = 15))
x2
y <- c(0, 2, 2, 1, 0)
var(y)
(0-1)^2 + (2-1)^2 + (2-1)^2 + (1-1)^2 + (0-1)^2
x1 <- c(2, -1, -2, 0, 1)
var(x1)
x2 <- c(-1,1,1,0,-1)
mean(x2)
var(x2)
x3 <- c(1,1,-1,-1,0)
var(3)
var(x3)
x <- rnorm(100)
y <- -x^2 - 3*x + 2 + rnorm(100)
plot(x,y)
y <- x^2 + x + 2 + rnorm(100)
plot(x,y)
y <- x^2 + x + 2 + rnorm(100, sd = .25)
plot(x,y)
y <- -x^2 - 3*x + 2 + rnorm(1000)
x <- rnorm(1000)
y <- -x^2 - 3*x + 2 + rnorm(1000)
plot(x,y)
y <- x^2 + x + 2 + rnorm(100, sd = .25)
plot(x,y)
y <- x^2 - 2 + rnorm(100, sd = .25)
plot(x,y)
cor(x, y)
diag(4)
diag(4) - (1/4)*matrix(1, ncol =4, nrow =4)
C = diag(4) - (1/4)*matrix(1, ncol =4, nrow =4)
C%*%C
C
C%*%t(C)
library(readxl)
doc_test <- read_excel("C:/Users/eager/Downloads/ApplicationData-2024-11-18T16_05_55.052Z (1).xlsx")
View(doc_test)
log_reg_df <- data.frame(status = ifelse(doc_test$Status == "Committed", 1, 0), major = as.factor(doc_test$`Major 1 Description`), gpa = doc_test$`Cumulative GPA`, year = as.factor(doc_test$`Current Year of Study/Student Classification`))
head(log_reg_df)
mylogit <- glm(status ~ major + gpa + year, data = log_reg_df, family = "binomial")
mylogit
summary(mylogit)
mylogit <- glm(status ~ gpa + year, data = log_reg_df, family = "binomial")
summary(mylogit)
library(readxl)
doc_test <- read_excel("C:/Users/eager/Downloads/ApplicationData-2024-11-18T16_05_55.052Z (1).xlsx")
View(doc_test)
log_reg_df <- data.frame(status = ifelse(doc_test$Status == "Committed", 1, 0), major = as.factor(doc_test$`Major 1 Description`), gpa = doc_test$`Cumulative GPA`, year = as.factor(doc_test$`Current Year of Study/Student Classification`))
head(log_reg_df)
mylogit <- glm(status ~ major + gpa + year, data = log_reg_df, family = "binomial")
summary(mylogit)
mylogit$residuals
predict(mylogit)
predict(mylogit, type = "response")
round(predict(mylogit, type = "response"))
table(round(predict(mylogit, type = "response")), log_reg_df$status)
809/9
809/10
x <- matrix(1:8, ncol = 4)
x
cov(x)
32*1.25
6*2
10*60
3*6
40*6
150*5
750+250+600
test = sample(1:4, size = 1000, replace = T, prob = c(.675, .208, .075, .042))
test2 = test[sample(1:len(test), size = 914, replace = F)]
test2 = test[sample(1:length(test), size = 914, replace = F)]
table(test)
table(test2)
table(test/1000)
table(test)/1000
table(test2)/914
test2 = test[sample(1:length(test), size = 914, replace = F)]
table(test2)/914
test2 = c()
for(i in 1:length(test)){
flip <- runif(1)
if(test[i] != 1 & flip > 1/3){
# do nothing
} else{
test2 <- c(test2, test[i])
}
}
test2 = c()
for(i in 1:length(test)){
flip <- runif(1)
if(test[i] != 1 & flip > 1/4){
# do nothing
} else{
test2 <- c(test2, test[i])
}
}
test2 = c()
for(i in 1:length(test)){
flip <- runif(1)
if(test[i] != 1 & flip > 1/5){
# do nothing
} else{
test2 <- c(test2, test[i])
}
}
test2 = c()
for(i in 1:length(test)){
flip <- runif(1)
if(test[i] != 1 & flip > 1/2){
# do nothing
} else{
test2 <- c(test2, test[i])
}
}
test2 = c()
for(i in 1:length(test)){
flip <- runif(1)
if(test[i] != 1 & flip > 2/3){
# do nothing
} else{
test2 <- c(test2, test[i])
}
}
test2 = c()
for(i in 1:length(test)){
flip <- runif(1)
if(test[i] != 1 & flip > 3/4){
# do nothing
} else{
test2 <- c(test2, test[i])
}
}
table(test2)/923
table(test)/1000
675/914
x <- rnorm(100)
y <- sin(x) + rnorm(100, sd = .5)
plot(x, y)
x <- rnorm(1000)
y <- sin(x) + rnorm(100, sd = .25)
plot(x, y)
x <- rnorm(1000, ds = 5)
x <- rnorm(1000, sd = 5)
y <- sin(x) + rnorm(1000, sd = .25)
plot(x, y)
test_lm <- lm(y ~ x)
plot(test_lm$residuals)
plot(x, test_lm$residuals)
test_lm <- lm(y ~ x + x^2)
plot(x, test_lm$residuals)
test_lm
x2 <- x^2
test_lm <- lm(y ~ x + x2)
test_lm
plot(x, test_lm$residuals)
x2 <- x^3
x2 <- x^2
x3 <- x^2
test_lm <- lm(y ~ x + x2 + x3)
plot(x, test_lm$residuals)
test_lm
x3
sinx <- sin(x)
test_lm <- lm(y ~ sinx)
plot(x, test_lm$residuals)
y <- sin(x + x^2) + rnorm(1000, sd = .2)
plot(x, y)
test_lm <- lm(y ~ x + x2)
plot(x, test_lm$residuals)
test_lm <- lm(y ~ sinx)
plot(x, test_lm$residuals)
sinx2 <- sin(x^2)
test_lm <- lm(y ~ sinx + sinx2)
plot(x, test_lm$residuals)
sinxx2 <- sin(x + x2)
test_lm <- lm(y ~ sinxx2)
plot(x, test_lm$residuals)
39/51
25/32
5/75
3/51
1245+75
1245/1320
2.5/3
1.5/3
2/3
1.5/3
5*15
5*12
70/5
5*14
4.475/.05
89.5+8
97.5*.05
setwd("C:/Users/eager/Downloads")
library(readr)
train <- read_csv("train.csv")
View(train)
head(train)
names(train)
y <- train$launch_speed
library(brms)
plot(train)
plot(train$pitch_velocity, train$launch_speed)
plot(train$pitch_movement_x, train$launch_speed)
plot(train$pitch_movement_y, train$launch_speed)
plot(train$plate_x, train$launch_speed)
plot(train$plate_y, train$launch_speed)
plot(train$bat_speed, train$launch_speed)
plot(train$swing_length, train$launch_speed)
plot(train$launch_angle, train$launch_speed)
rm(y)
train_scale <- train
train_scale[,-19] <- scale(train_scale[,-19])
train_scale[,-c(4,5,12,13,14,15,19)] <- scale(train_scale[,-c(4,5,12,13,14,15,19)])
hist(train_scale$launch_speed)
train_scale$plate_x2 <- train_scale$plate_x^2
length(unique(train_scale$batterId))
train_scale <- train
train_scale[,-c(2,3,4,5,12,13,14,15,19)] <- scale(train_scale[,-c(4,5,12,13,14,15,19)])
train_scale[,-c(2,3,4,5,12,13,14,15,19)] <- scale(train_scale[,-c(2,3,4,5,12,13,14,15,19)])
train_scale <- train
train_scale[,-c(2,3,4,5,12,13,14,15,19)] <- scale(train_scale[,-c(2,3,4,5,12,13,14,15,19)])
train_scale$plate_x2 <- train_scale$plate_x^2
length(unique(train_scale$batterId))
hist(train_scale$launch_speed)
prior_gauss <- default_prior(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle,
data = train_scale,
family = gaussian())
prior_gauss <- default_prior(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle,
data = train_scale,
family = gaussian())
brm_gauss <- brm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle,
family = gaussian(),
data = train_scale,
chains = 2,
iter = 100,
warmup = 18,
prior = prior_gauss)
summary(brm_gauss)
bayes_R2(brm_gauss)
plot(brm_gauss)
brm_gauss <- brm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle,
family = gaussian(),
data = train_scale,
chains = 4,
iter = 1000,
warmup = 180,
prior = prior_gauss)
summary(brm_gauss)
bayes_R2(brm_gauss)
plot(brm_gauss)
plot(train_scale$launch_angle, train_scale$launch_speed)
train_scale$langle2 <- train_scale$launch_angle^2
prior_gauss <- default_prior(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle + langle2,
data = train_scale,
family = gaussian())
brm_gauss <- brm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle + langle2,
family = gaussian(),
data = train_scale,
chains = 4,
iter = 5000,
warmup = 400,
prior = prior_gauss)
summary(brm_gauss)
plot(brm_gauss)
bayes_R2(brm_gauss)
cor(train_scale)
cor(train_scale, method = "spearman")
prior_gauss <- default_prior(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle + langle2 + (1|batterId),
data = train_scale,
family = gaussian())
brm_gauss <- brm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_y + plate_x + plate_x2 + bat_speed + swing_length + launch_angle + langle2 + (1|batterId),
family = gaussian(),
data = train_scale,
chains = 4,
iter = 5000,
warmup = 400,
prior = prior_gauss)
summary(brm_gauss)
bayes_R2(brm_gauss)
prior_gauss <- default_prior(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_x*pitch_movement_y + (plate_x + plate_x2)*plate_y + bat_speed*swing_length + balls*strikes + launch_angle + langle2 + (1|batterId),
data = train_scale,
family = gaussian())
brm_gauss <- brm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_x*pitch_movement_y + (plate_x + plate_x2)*plate_y + bat_speed*swing_length + balls*strikes + launch_angle + langle2 + (1|batterId),
family = gaussian(),
data = train_scale,
chains = 4,
iter = 5000,
warmup = 400,
prior = prior_gauss)
summary(brm_gauss)
plot(brm_gauss)
bayes_R2(brm_gauss)
library(readr)
test <- read_csv("test.csv")
View(test)
?scale
# test predictions
test_scale <- test
# test predictions
test_scale <- test[,c(1:11, 14, 15, 18)]
test_scale[,-c(2:5,12:13)] <- sweep(test_scale[,-c(2:5,12:13)],
MARGIN = 2,
STATS = colMeans(test_scale[,-c(2:5,12:13)]))
apply(test_scale[-,c(2:5,12:13)], 2, mean())
apply(test_scale[,-c(2:5,12:13)], 2, mean())
apply(X = test_scale[,-c(2:5,12:13)], MARGIN = 2, FUN = mean())
apply(X = test_scale[,-c(2:5,12:13)], MARGIN = 2, FUN = mean
)
apply(X = test_scale[,-c(2:5,12:13)], MARGIN = 2, FUN = sd)
test_scale[,-c(2:5,12:13)] <- sweep(test_scale[,-c(2:5,12:13)],
MARGIN = 2,
FUN = "/",
STATS = apply(test_scale[,-c(2:5,12:13)], 2, sd))
head(test_scale)
plot(conditional_effects(brm_gauss, "pitch_velocity"))
plot(conditional_effects(brm_gauss, "bat_speed:swing_length"))
plot(conditional_effects(brm_gauss, "pitch_velocity:langle2"))
plot(conditional_effects(brm_gauss, "batter_side:pitcher_side"))
post_preds <- posterior_predict(brm_gauss, newdata = test_scale)
post_preds <- posterior_predict(brm_gauss, newdata = test_scale, allow_new_levels = TRUE)
test_scale$plate_x2 <- test_scale$plate_x^2
test_scale$langle2 <- test_scale$launch_angle^2
test_scale$langle2 <- test_scale$launch_angle^2
head(test_scale)
post_preds <- posterior_predict(brm_gauss, newdata = test_scale, allow_new_levels = TRUE)
hist(post_preds[,1])
post_pred_means <- colMeans(post_preds)
hist(post_pred_means)
post_preds_train <- posterior_predict(brm_gauss)
post_means_train <- colMeans(post_preds_train)
plot(post_preds_train, train_scale$launch_speed)
plot(post_preds_train, train$launch_speed)
length(train$launch_speed)
length(post_preds_train)
plot(post_means_train, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
?brm
prior_gauss <- default_prior(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_x*pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls*strikes + launch_angle + langle2 + (1|batterId),
data = train_scale,
family = skew_normal())
brm_gauss <- brm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_x*pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls*strikes + launch_angle + langle2 + (1|batterId),
family = skew_normal(),
data = train_scale,
chains = 4,
iter = 5000,
warmup = 400,
prior = prior_gauss)
bayes_R2(brm_gauss)
post_preds_train <- posterior_predict(brm_gauss)
post_means_train <- colMeans(post_preds_train)
plot(post_means_train, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
test_scale <- test[,c(1:11, 14, 15, 18)]
test_scale[,-c(2:5,12:13)] <- sweep(test_scale[,-c(2:5,12:13)],
MARGIN = 2,
STATS = colMeans(test_scale[,-c(2:5,12:13)]))
test_scale[,-c(2:5,12:13)] <- sweep(test_scale[,-c(2:5,12:13)],
MARGIN = 2,
FUN = "/",
STATS = apply(test_scale[,-c(2:5,12:13)], 2, sd))
test_scale$plate_x2 <- test_scale$plate_x^2
test_scale$langle2 <- test_scale$launch_angle^2
head(test_scale)
post_preds <- posterior_predict(brm_gauss, newdata = test_scale, allow_new_levels = TRUE)
hist(post_preds[,1])
post_pred_means <- colMeans(post_preds)
hist(post_pred_means)
plot(train$pitch_velocity, train$launch_speed)
plot(train$plate_x, train$launch_speed)
plot(train$launch_angle, train$launch_speed)
hist(train_scale$launch_speed)
plot(conditional_effects(brm_gauss, "batter_side:pitcher_side"))
simple_lm <- lm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + pitch_movement_x*pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls*strikes + launch_angle + langle2, data = train_scale)
summary(simple_lm)
summary(brm_gauss)
plot(predict(simple_lm), train_scale$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
library(nnet)
?nnet
nnet_try <- nnet(launch_speed ~ pitch_velocity + batter_side + pitcher_side + pitch_movement_x + pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls + strikes + launch_angle + langle2, data = train_scale, linout = T, size = 12)
hist(nnet_try$fitted.values)
plot(nnet_try$fitted.values, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
nnet_try <- nnet(launch_speed ~ pitch_velocity + batter_side + pitcher_side + pitch_movement_x + pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls + strikes + launch_angle + langle2, data = train_scale, linout = T, size = 20, maxit = 500)
hist(nnet_try$fitted.values)
plot(nnet_try$fitted.values, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
nnet_try <- nnet(launch_speed ~ pitch_velocity + batter_side + pitcher_side + pitch_movement_x + pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls + strikes + launch_angle + langle2, data = train_scale, linout = T, size = 35, maxit = 1000)
hist(nnet_try$fitted.values)
plot(nnet_try$fitted.values, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
cor(nnet_try$fitted.values, train$launch_speed)
cor(nnet_try$fitted.values, train$launch_speed)^2
nnet_try <- nnet(launch_speed ~ pitch_velocity + batter_side + pitcher_side + pitch_movement_x + pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls + strikes + launch_angle + langle2, data = train_scale, linout = T, size = 24, maxit = 1000)
hist(nnet_try$fitted.values)
plot(nnet_try$fitted.values, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
cor(nnet_try$fitted.values, train$launch_speed)^2
nnet_try <- nnet(launch_speed ~ pitch_velocity + batter_side + pitcher_side + pitch_movement_x + pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls + strikes + launch_angle + langle2, data = train_scale, linout = T, size = 42, maxit = 1000)
hist(nnet_try$fitted.values)
plot(nnet_try$fitted.values, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
cor(nnet_try$fitted.values, train$launch_speed)^2
predict(nnet_try, newdata = test_scale)
nnet_preds <- predict(nnet_try, newdata = test_scale)
hist(nnet_preds)
hist(ifelse(nnet_preds < 0, 0, nnet_preds))
preds_lm <- predict(simple_lm, test_scale)
write.csv(preds_lm, "preds_lm.csv", row.names = F)
nnet_try <- nnet(launch_speed ~ pitch_velocity + batter_side + pitcher_side + pitch_movement_x + pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls + strikes + launch_angle + langle2, data = train_scale, size = 30, maxit = 1000)
hist(nnet_try$fitted.values)
nnet_try <- nnet(launch_speed ~ pitch_velocity + batter_side + pitcher_side + pitch_movement_x + pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + swing_length + balls + strikes + launch_angle + langle2, data = train_scale, linout = T, size = 30, maxit = 1000)
hist(nnet_try$fitted.values)
plot(nnet_try$fitted.values, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
cor(nnet_try$fitted.values, train$launch_speed)^2
nnet_preds <- predict(nnet_try, newdata = test_scale)
hist(nnet_preds)
write.csv(nnet_preds, "preds_lm.csv", row.names = F)
write.csv(nnet_preds, "preds_lm.csv", row.names = F)
plot(train$plate_x, train$launch_speed)
hist(train_scale$launch_speed)
summary(brm_gauss)
plot(conditional_effects(brm_gauss, "batter_side:pitcher_side"))
bayes_R2(brm_gauss)
summary(simple_lm)
plot(predict(simple_lm), train_scale$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
plot(nnet_try$fitted.values, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
cor(nnet_try$fitted.values, train$launch_speed)^2
plot(brm_gauss)
train_scale$batterId <- as.factor(train_scale$batterId)
length(unique(train_scale$batterId))
train_scale$pitch_movement_x2 <- train_scale$pitch_movement_x^2
prior_gauss <- default_prior(launch_speed ~ pitch_velocity + batter_side*pitcher_side + (pitch_movement_x + pitch_movement_x2)*pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + launch_angle + langle2 + (1|batterId),
data = train_scale,
family = gaussian())
brm_gauss <- brm(launch_speed ~ pitch_velocity + batter_side*pitcher_side + (pitch_movement_x + pitch_movement_x2)*pitch_movement_y + plate_x + plate_x2 + plate_y + bat_speed + launch_angle + langle2 + (1|batterId),
family = gaussian(),
data = train_scale,
chains = 4,
iter = 4000,
thin = 2,
warmup = 300,
prior = prior_gauss)
summary(brm_gauss)
bayes_R2(brm_gauss)
plot(conditional_effects(brm_gauss, "batter_side:pitcher_side"))
post_preds_train <- posterior_predict(brm_gauss)
post_means_train <- colMeans(post_preds_train)
plot(post_means_train, train$launch_speed)
abline(0, 1, col = 'red', lwd = 2)
setwd("C:/Users/eager/OneDrive - Northeastern University/Desktop/NORTHEASTERN/Spring 2025/MMLN Package Testing/MMLN")
setwd("C:/Users/eager/OneDrive - Northeastern University/Desktop/NORTHEASTERN/Spring 2025/DS 4420/Project/ProjectGits/DS4420_Final_Project/MLP")
library(shiny); runApp('Cancer_application.R')
runApp('Cancer_application.R')
